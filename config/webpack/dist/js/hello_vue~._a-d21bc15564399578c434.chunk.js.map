{"version":3,"file":"js/hello_vue~._a-d21bc15564399578c434.chunk.js","sources":["webpack:///./app/javascript/vue/store/index.js","webpack:///./app/javascript/vue/store/mutations.js","webpack:///util (ignored)","webpack:///util (ignored)?1455","webpack:///util (ignored)?8ef8","webpack:///util (ignored)?e770","webpack:///buffer (ignored)","webpack:///crypto (ignored)","webpack:///util (ignored)?fc47","webpack:///util (ignored)?5236","webpack:///buffer (ignored)?fe3f","webpack:///buffer (ignored)?895b"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nVue.use(Vuex)\nimport actions from './actions'\nimport mutations from './mutations'\nimport getters from './getters'\n\nexport const createStore = () => {\n\n  let vueStore = JSON.parse(localStorage.getItem('cuisinier_rebelle'))\n  let data = {}\n\n  if (vueStore) {\n    // Remove localStorage prior VueJS\n    if (vueStore.timestamp && vueStore.timestamp < 1605233042272) {\n      localStorage.removeItem('cuisinier_rebelle')\n      vueStore = null\n    }\n    // Force Update\n    if (vueStore.data.timestamp && vueStore.data.timestamp < 1605317110896) {\n      localStorage.removeItem('cuisinier_rebelle')\n      vueStore = null\n    }\n  }\n\n  if (vueStore) {\n    console.log('loading vueStore')\n    data = vueStore.data\n  }\n  else {\n    console.log('initiate vuex store')\n    data = {\n      authorization: null,\n      isAuthenticated: false,\n      lastUpdated: 0,\n      recipes: [],\n      search: {\n        users: [],\n        recipes: [],\n      },\n      timestamp: null,\n      user: {\n        email: null,\n        authentication_token: null,\n        bookmarks: [],\n        followers: {\n          count: 0,\n          data: [],\n        },\n        following: {\n          count: 0,\n          data: [],\n        }\n      },\n      users: [],\n      render: {\n        navbarHeight: 0,\n      }\n    }\n  }\n\n  return new Vuex.Store({\n    state: {\n      data: data\n    },\n    getters,\n    mutations,\n    actions\n  });\n}\n","import Vue from 'vue'\n\nconst saveToLocalStorage = (state, caller) => {\n  console.log(caller)\n  console.log(state)\n  localStorage.setItem('cuisinier_rebelle', JSON.stringify({ data: state.data }))\n}\n\nexport default {\n\n  COMMENT_LIKE: (state, payload) => {\n    // console.log('COMMENT_LIKE')\n    state.data.user.commentLikes.push(payload.comment_id)\n\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.recipe_id)[0]\n    const recipePosition = state.data.recipes.indexOf(recipe)\n    const comment = state.data.recipes[recipePosition].comments.filter(r => r.id === payload.comment_id)[0]\n    const commentPosition = state.data.recipes[recipePosition].comments.indexOf(comment)\n    state.data.recipes[recipePosition].comments[commentPosition].likes += 1\n    saveToLocalStorage(state, 'COMMENT_LIKE')\n  },\n\n  COMMENT_UNLIKE: (state, payload) => {\n    const el = state.data.user.commentLikes.filter(r => r === payload.comment_id)[0]\n    const position = state.data.user.commentLikes.indexOf(el)\n    state.data.user.commentLikes.splice(position, 1)\n\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.recipe_id)[0]\n    const recipePosition = state.data.recipes.indexOf(recipe)\n    const comment = state.data.recipes[recipePosition].comments.filter(r => r.id === payload.comment_id)[0]\n    const commentPosition = state.data.recipes[recipePosition].comments.indexOf(comment)\n    state.data.recipes[recipePosition].comments[commentPosition].likes -= 1\n    saveToLocalStorage(state, 'COMMENT_UNLIKE')\n  },\n\n  REPLY_LIKE: (state, payload) => {\n    state.data.user.replyLikes.push(payload.reply_id)\n\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.recipe_id)[0]\n    const recipePosition = state.data.recipes.indexOf(recipe)\n    const comment = state.data.recipes[recipePosition].comments.filter(r => r.id === payload.comment_id)[0]\n    const commentPosition = state.data.recipes[recipePosition].comments.indexOf(comment)\n    const reply = state.data.recipes[recipePosition].comments[commentPosition].replies.filter(r => r.id === payload.reply_id)[0]\n    const replyPosition = state.data.recipes[recipePosition].comments[commentPosition].replies.indexOf(reply)\n    state.data.recipes[recipePosition].comments[commentPosition].replies[replyPosition].likes += 1\n    saveToLocalStorage(state, 'REPLY_LIKE')\n  },\n\n  REPLY_UNLIKE: (state, payload) => {\n    const el = state.data.user.replyLikes.filter(r => r === payload.reply_id)[0]\n    const position = state.data.user.replyLikes.indexOf(el)\n    state.data.user.replyLikes.splice(position, 1)\n\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.recipe_id)[0]\n    const recipePosition = state.data.recipes.indexOf(recipe)\n    const comment = state.data.recipes[recipePosition].comments.filter(r => r.id === payload.comment_id)[0]\n    const commentPosition = state.data.recipes[recipePosition].comments.indexOf(comment)\n    const reply = state.data.recipes[recipePosition].comments[commentPosition].replies.filter(r => r.id === payload.reply_id)[0]\n    const replyPosition = state.data.recipes[recipePosition].comments[commentPosition].replies.indexOf(reply)\n    state.data.recipes[recipePosition].comments[commentPosition].replies[replyPosition].likes -= 1\n    saveToLocalStorage(state, 'REPLY_UNLIKE')\n  },\n\n  REPLY_EDIT: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.data.recipe.id)[0]\n    console.log(recipe)\n    const position = state.data.recipes.indexOf(recipe)\n    console.log(position)\n    const comment = state.data.recipes[position].comments.filter(comment => comment.id === payload.data.id)[0]\n    const pos = state.data.recipes[position].comments.indexOf(comment)\n    state.data.recipes[position].comments[pos] = payload.data\n    saveToLocalStorage(state, 'REPLY_EDIT')\n  },\n\n  REPLY_DELETE: (state, payload) => {\n    console.log(payload)\n    console.log(state)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.recipe_id)[0]\n    console.log(recipe)\n    const position = state.data.recipes.indexOf(recipe)\n    console.log(position)\n    const comment = state.data.recipes[position].comments.filter(c => c.id === payload.comment_id)[0]\n    const pos = state.data.recipes[position].comments.indexOf(comment)\n    const reply = state.data.recipes[position].comments[pos].replies.filter(r => r.id === payload.id)[0]\n    const p = state.data.recipes[position].comments[pos].replies.indexOf(reply)\n    state.data.recipes[position].comments[pos].replies.splice(p, 1)\n    saveToLocalStorage(state, 'REPLY_DELETE')\n  },\n\n  REPLY_NEW: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.data.recipe.id)[0]\n    console.log(recipe)\n    const position = state.data.recipes.indexOf(recipe)\n    console.log(position)\n    const comment = state.data.recipes[position].comments.filter(comment => comment.id === payload.data.id)[0]\n    const pos = state.data.recipes[position].comments.indexOf(comment)\n    state.data.recipes[position].comments[pos] = payload.data\n    saveToLocalStorage(state, 'REPLY_NEW')\n  },\n\n  COMMENT_DELETE: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.recipe_id)[0]\n    console.log(recipe)\n    const position = state.data.recipes.indexOf(recipe)\n    console.log(position)\n    const comment = state.data.recipes[position].comments.filter(c => c.id === payload.comment_id)[0]\n    const pos = state.data.recipes[position].comments.indexOf(comment)\n    state.data.recipes[position].comments.splice(pos, 1)\n    saveToLocalStorage(state, 'COMMENT_DELETE')\n  },\n\n  COMMENT_EDIT: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.data.recipe.id)[0]\n    console.log(recipe)\n    const position = state.data.recipes.indexOf(recipe)\n    console.log(position)\n    const comment = state.data.recipes[position].comments.filter(comment => comment.id === payload.data.id)[0]\n    const pos = state.data.recipes[position].comments.indexOf(comment)\n    state.data.recipes[position].comments[pos] = payload.data\n    saveToLocalStorage(state, 'COMMENT_EDIT')\n  },\n\n  COMMENT_NEW: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.data.recipe.id)[0]\n    console.log(recipe)\n    const position = state.data.recipes.indexOf(recipe)\n    console.log(position)\n    state.data.recipes[position].comments.push(payload.data)\n    saveToLocalStorage(state, 'COMMENT_NEW')\n  },\n\n  BOOKMARK: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    state.data.user.bookmarks.push(payload)\n    console.log(`bookmarks: ${ state.data.user.bookmarks.length }`)\n\n    const recipe = state.data.recipes.filter(recipe => recipe.recipe.id === payload.recipe_id)[0]\n    const position = state.data.recipes.indexOf(recipe)\n    state.data.recipes[position].recipe.bookmarks += 1\n    saveToLocalStorage(state, 'BOOKMARK')\n  },\n\n  UNBOOKMARK: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    const bookmark = state.data.user.bookmarks.filter(bookmark => bookmark.recipe_id === payload.recipe_id)[0]\n    let position = state.data.user.bookmarks.indexOf(bookmark)\n    state.data.user.bookmarks.splice(position, 1)\n    console.log(`bookmarks: ${ state.data.user.bookmarks.length }`)\n\n    const recipe = state.data.recipes.filter(recipe => recipe.recipe.id === payload.recipe_id)[0]\n    position = state.data.recipes.indexOf(recipe)\n    state.data.recipes[position].recipe.bookmarks -= 1\n    saveToLocalStorage(state, 'UNBOOKMARK')\n  },\n\n  FOLLOW: (state, payload) => {\n    console.log(payload)\n    state.data.user.following.count += 1\n    state.data.user.following.data.push(payload.data.user)\n    const user = state.data.users.filter(user => user.slug === payload.data.user.slug)[0]\n    const position = state.data.users.indexOf(user)\n    state.data.users[position].followers.count += 1\n    state.data.users[position].followers.data.push(payload.data.user)\n    saveToLocalStorage(state, 'FOLLOW')\n  },\n\n  UNFOLLOW: (state, payload) => {\n    console.log(payload)\n    state.data.user.following.count -= 1\n    let user = state.data.user.following.data.filter(user => user.slug === payload.user)[0]\n    let position = state.data.user.following.data.indexOf(user)\n    state.data.user.following.data.splice(position, 1)\n    user = state.data.users.filter(user => user.slug === payload.user)[0]\n    position = state.data.users.indexOf(user)\n    state.data.users[position].followers.count -= 1\n    state.data.users[position].followers.data.splice(position, 1)\n    saveToLocalStorage(state, 'UNFOLLOW')\n  },\n\n  LIKE: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    state.data.user.likes.push(payload)\n    console.log(`user's likes: ${ state.data.user.likes.length }`)\n\n    const recipe = state.data.recipes.filter(recipe => recipe.recipe.id === payload.recipe_id)[0]\n    const position = state.data.recipes.indexOf(recipe)\n    state.data.recipes[position].recipe.likes += 1\n    saveToLocalStorage(state, 'LIKE')\n  },\n\n  UNLIKE: (state, payload) => {\n    console.log(payload)\n    // console.log(state)\n    const like = state.data.user.likes.filter(like => like.recipe_id === payload.recipe_id)[0]\n    let position = state.data.user.likes.indexOf(like)\n    state.data.user.likes.splice(position, 1)\n    console.log(`user's likes: ${ state.data.user.likes.length }`)\n\n    const recipe = state.data.recipes.filter(recipe => recipe.recipe.id === payload.recipe_id)[0]\n    position = state.data.recipes.indexOf(recipe)\n    state.data.recipes[position].recipe.likes -= 1\n    saveToLocalStorage(state, 'UNLIKE')\n  },\n\n  IS_AUTHENTICATED: (state, payload) => {\n    console.log(state)\n    console.log(payload)\n    state.data.isAuthenticated = payload.isAuthenticated\n    if (payload.isAuthenticated === false) {\n      state.data.user = { email: null, authentication_token: null }\n      state.data.authorization = null\n      // state.data.isAuthenticated = false\n      // state.data.lastUpdated = new Date().getTime() + (1000 * 60 * 3)\n    }\n    saveToLocalStorage(state, 'IS_AUTHENTICATED')\n  },\n\n  SET_DATA: (state, payload) => {\n    // console.log(state)\n    // console.log(payload)\n    for (const [key, value] of Object.entries(payload.data)) {\n      // console.log(`${key}: ${value}`)\n      state.data[key] = payload.data[key]\n    }\n    // state.data = payload.data\n    console.log(state.data)\n    // state.data.lastUpdated = new Date().getTime()\n    saveToLocalStorage(state, 'SET_DATA')\n  },\n\n  RECIPE_NEW: (state, payload) => {\n    state.data.recipes.push(payload.data)\n    // state.data.lastUpdated = new Date().getTime()\n    saveToLocalStorage(state, 'RECIPE_NEW')\n  },\n\n  RECIPE: (state, payload) => {\n    // console.log('### RECIPE ###')\n    // console.log(state)\n    // console.log(payload)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.data.recipe.id)[0]\n    console.log(recipe)\n    if (recipe) {\n      const position = state.data.recipes.indexOf(recipe)\n      console.log(position)\n      state.data.recipes[position] = payload.data\n      // console.log(state.data)\n      // state.data.lastUpdated = new Date().getTime()\n      saveToLocalStorage(state, 'RECIPE')\n    }\n  },\n\n  USERS: (state, payload) => {\n    console.log('### USERS ###')\n    console.log(payload)\n    state.data.users = payload.data.data.users\n    // state.data.lastUpdated = new Date().getTime()\n    saveToLocalStorage(state, 'USERS')\n  },\n\n  RECIPES: (state, payload) => {\n    console.log('### RECIPES ###')\n    console.log(state)\n    console.log(payload)\n    if (state.data.recipes.length === 0) {\n      state.data.recipes = payload.data\n      // state.data.lastUpdated = new Date().getTime()\n      saveToLocalStorage(state, 'RECIPES')\n    }\n  },\n\n  SEARCH: (state, payload) => {\n    console.log('### SEARCH ###')\n    console.log(state)\n    console.log(payload)\n    state.data.search.recipes = payload.data.recipes\n    // state.data.lastUpdated = new Date().getTime()\n    saveToLocalStorage(state, 'SEARCH')\n  },\n\n  RECIPE_LOG: (state, payload) => {\n    console.log(payload)\n    const recipe = state.data.recipes.filter(r => r.recipe.id === payload.data.recipe.id)[0]\n    console.log(recipe)\n    const position = state.data.recipes.indexOf(recipe)\n    console.log(position)\n    state.data.recipes[position].recipe.views = payload.views\n    // state.data.user.points.splice(position, 1)\n    saveToLocalStorage(state, 'RECIPE_LOG')\n  },\n\n  LOG_IN: (state, payload) => {\n    console.log(payload)\n    state.data.user = payload.data\n    state.data.authorization = payload.headers.authorization.split('Bearer ')[1]\n    state.data.isAuthenticated = true\n    // state.data.lastUpdated = new Date().getTime()\n    console.log(state)\n    saveToLocalStorage(state, 'LOG_IN')\n  },\n\n  LOG_OUT: (state, payload) => {\n    console.log(payload)\n    console.log(state)\n    state.data.user = { email: null, authentication_token: null }\n    state.data.authorization = null\n    state.data.isAuthenticated = false\n    // state.data.lastUpdated = new Date().getTime() + (1000 * 60 * 3)\n    saveToLocalStorage(state, 'LOG_OUT')\n  },\n\n  NAVBAR_HEIGHT: (state, payload) => {\n    state.data.render.navbarHeight = payload\n    // context.commit(\"NAVBAR_HEIGHT\", navbarHeight)\n    saveToLocalStorage(state, 'NAVBAR_HEIGHT')\n  },\n\n\n  // SET_NEW_COMMENT: (state, payload) => {\n  //   console.log(payload)\n  //   const item = state.data.posts.filter(item => item.id === parseInt(state.route.params.id))[0]\n  //   // console.log(item)\n\n  //   const id = parseInt(state.data.lastCommentId) + 1\n  //   state.data.lastCommentId = id\n\n  //   const newComment = {\n  //     children: null,\n  //     content: payload.content,\n  //     id: id,\n  //     name: payload.name,\n  //     slug: payload.slug,\n  //     picture: payload.picture,\n  //     timestamp: payload.timestamp,\n  //     user_id: payload.user_id,\n  //     parent: null\n  //   }\n\n  //   if (payload.parent === null) {\n  //     // console.log('new comment')\n  //   } else {\n  //     console.log('new reply')\n  //     const parent = item.comments.filter(item => item.id === parseInt(payload.parent))[0]\n  //     newComment.parent = {\n  //       ancestry: null,\n  //       content: parent.content,\n  //       created_at: new Date(parent.timestamp).toISOString(),\n  //       id: parent.id,\n  //       updated_at: new Date(parent.timestamp).toISOString(),\n  //       user_id: parent.user_id\n  //     }\n  //     if (parent.children === null) parent.children = []\n  //     parent.children.push({\n  //       content: payload.content,\n  //       id: id,\n  //       name: payload.name,\n  //       slug: payload.slug,\n  //       picture: payload.picture,\n  //       timestamp: payload.timestamp,\n  //       user_id: payload.user_id\n  //     })\n  //   }\n  //   item.comments.push(newComment)\n  // },\n\n  // SET_FOLLOWING: (state, payload) => {\n  //   console.log(payload)\n  //   // const post = state.data.user.following.filter(item => item.id === parseInt(payload.id))[0]\n  //   console.log(payload.type)\n  //   if (payload.type === 'follow') {\n  //     state.data.user.following.push({\n  //       id: payload.data.id,\n  //       name: payload.data.name,\n  //       slug: payload.data.slug,\n  //       picture: payload.data.picture,\n  //     })\n  //     console.log(state.data.user.following)\n  //   }\n  //   else {\n  //     const position = state.data.user.following.map(user => user.id).indexOf(parseInt(payload.id))\n  //     if (position >= 0) {\n  //       state.data.user.following.splice(position, 1)\n  //     } else {\n  //       console.log('error: cannot find element')\n  //       console.log(`position ${position}`)\n  //       console.log(payload.id)\n  //       console.log(state.data.user.following)\n  //     }\n  //   }\n  // },\n\n  // SET_LIKED_POST: (state, payload) => {\n  //   console.log(payload)\n  //   const post = state.data.posts.filter(item => item.id === parseInt(payload.id))[0]\n  //   // const position = state.data.posts.indexOf(post)\n  //   // state.data.posts.splice(position, 1)\n  //   if (payload.status === 200) {\n  //     // post.points += 1\n  //     state.data.user.points.push(parseInt(payload.id))\n  //   }\n  //   else {\n  //     // post.points -= 1\n  //     const position = state.data.user.points.indexOf(parseInt(payload.id))\n  //     state.data.user.points.splice(position, 1)\n  //   }\n  // },\n\n  // SET_LIKED_POST_ALT: (state, payload) => {\n  //   console.log(payload)\n  //   const post = state.data.userShow.posts.filter(item => item.id === parseInt(payload.id))[0]\n  //   // const position = state.data.posts.indexOf(post)\n  //   // state.data.posts.splice(position, 1)\n  //   if (payload.status === 200) {\n  //     // post.points += 1\n  //     state.data.user.points.push(parseInt(payload.id))\n  //   }\n  //   else {\n  //     // post.points -= 1\n  //     const position = state.data.user.points.indexOf(parseInt(payload.id))\n  //     state.data.user.points.splice(position, 1)\n  //   }\n  // },\n\n  // SET_PINNED_POST: (state, payload) => {\n  //   console.log(payload)\n  //   const post = state.data.userShow.posts.filter(item => item.id === parseInt(payload.id))[0]\n  //   const position = state.data.userShow.posts.indexOf(post)\n  //   console.log(position)\n  //   console.log(payload.pin)\n  //   if (position != 0) state.data.userShow.posts[0].pin = false\n  //   state.data.userShow.posts[position].pin = payload.pin\n\n  //   let arr = state.data.userShow.posts.sort((a, b) => (a.timestamp > b.timestamp) ? 1 : -1).reverse()\n  //   if (payload.pin) {\n  //     const pin = state.data.userShow.posts.filter(item => item.pin === true)[0]\n  //     console.log(pin)\n  //     if (pin) {\n  //       arr.unshift(arr.splice(arr.indexOf(pin), 1)[0])\n  //     }\n  //   }\n  //   console.log(arr)\n  //   state.data.userShow.posts = arr\n  // },\n\n  // DELETE_POST: (state, payload) => {\n  //   console.log(payload)\n  //   if (payload.parentId) {\n  //     const post = state.data.posts.filter(item => item.id === parseInt(payload.parentId))[0]\n  //     console.log(post)\n  //     const forward = post.forwards.filter(item => item.id === parseInt(payload.forwardId))[0]\n  //     let position = post.forwards.indexOf(forward)\n  //     post.forwards.splice(position,1)\n  //     position = state.data.posts.indexOf(post)\n  //     state.data.posts.splice(position, 1, post)\n  //   }\n  //   if (state.route.name === 'user') {\n  //     console.log(payload)\n  //     const post = state.data.userShow.posts.filter(item => item.id === parseInt(payload.postId))[0]\n  //     console.log(post)\n  //     if (post.forward) {\n  //       const parent = state.data.userShow.posts.filter(item => item.id === parseInt(post.forward.id))[0]\n  //       const position = state.data.userShow.posts.indexOf(parent)\n  //       const el = parent.forwards.filter(item => item.id === payload.postId)\n  //       const pos = parent.forwards.indexOf(el)\n  //       parent.forwards.splice(pos, 1)\n  //       state.data.userShow.posts.splice(position, 1, parent)\n  //     }\n  //     const position = state.data.userShow.posts.indexOf(post)\n  //     console.log(position)\n  //     state.data.userShow.posts.splice(position, 1)\n  //   }\n  //   else {\n  //     const post = state.data.posts.filter(item => item.id === parseInt(payload.postId))[0]\n  //     const position = state.data.posts.indexOf(post)\n  //     state.data.posts.splice(position, 1)\n  //   }\n\n  // },\n\n  // REMOVE_COMMENT: (state, payload) => {\n  //   const posts = state.data.posts.map(item => item.id)\n  //   const post_position = posts.indexOf(parseInt(payload.post_id))\n  //   const comments = state.data.posts[post_position].comments.map(comment => comment.id)\n  //   const comment_position = comments.indexOf(parseInt(payload.comment_id))\n  //   state.data.posts[post_position].comments.splice(comment_position, 1)\n  // },\n\n  // SET_NEW_POST: (state, payload) => {\n  //   // state.data = payload\n  //   const newPost = payload\n  //   newPost.comments = []\n  //   newPost.forward = null\n  //   newPost.forwards = []\n  //   // console.log('newPost')\n  //   // console.log(newPost)\n  //   state.data.posts.push(newPost)\n  //   state.data.lastPostId += 1\n  // },\n\n  // SET_FORWARD_POST: (state, { payload, page }) => {\n  //   console.log(page)\n  //   console.log(payload)\n  //   // const stateData = page === 'user' ? state.data.userShow.posts : state.data.posts\n  //   const result = (stateData, payload) => {\n  //     console.log(payload)\n  //     let post = stateData.filter(item => item.id === parseInt(payload.parent.id))[0]\n  //     post.forwards = payload.parent.forwards\n  //     console.log(`forwards: ${post.forwards.length}`)\n  //     let position = stateData.indexOf(post)\n  //     stateData.splice(position, 1, post)\n  //     if (payload.create) {\n  //       post = payload.post\n  //       post.forward = payload.parent\n  //       post.comments = []\n  //       post.forwards = []\n  //       post.points = 0\n  //       post.pin = false\n  //       // stateData.splice(0, 0, post)\n  //       stateData.unshift(post)\n  //       state.data.user.forwards.push(payload.forward)\n  //     }\n  //     else {\n  //       post = stateData.filter(item => item.id === parseInt(payload.post.id))[0]\n  //       position = stateData.indexOf(post)\n  //       stateData.splice(position, 1)\n\n  //       post = state.data.user.forwards.filter(item => item.id === parseInt(payload.parent.id))[0]\n  //       position = state.data.user.forwards.indexOf(payload.parent.id)\n  //       state.data.user.forwards.splice(position,1)\n  //     }\n  //     return stateData\n  //   }\n  //   if (page === 'user') state.data.userShow.posts = result(state.data.userShow.posts, payload)\n  //   else state.data.posts = result(state.data.posts, payload)\n  // },\n\n  // SET_EDIT_POST: (state, payload) => {\n  //   const post = state.data.posts.filter(item => item.id === parseInt(payload.id))[0]\n  //   const position = state.data.posts.indexOf(post)\n  //   state.data.posts.splice(position, 1, payload)\n  // },\n\n  // SET_SEARCH_POSTS: (state, payload) => {\n  //   console.log(payload)\n  //   state.data.searchPosts = payload\n  // },\n\n  // SET_USER_POSTS: (state, payload) => {\n  //   console.log(payload.data)\n  //   state.data.userShow = payload.data\n  // },\n\n  // SET_STORE: (state, payload) => {\n  //   console.log(payload)\n  //   state.data = payload\n  // },\n\n  // SET_DATA: (state, payload) => {\n  //   console.log(payload)\n  //   // state.data = payload\n  //   state.data.lastCommentId = payload.lastCommentId\n  //   state.data.lastPostId = payload.lastPostId\n  //   state.data.posts = payload.posts\n  //   state.data.user = payload.user\n  //   // state.data.points = payload.points\n  //   // console.log(payload.pages)\n  //   // if (payload.pages != undefined && payload.pages.length > 0) state.data.pages = payload.pages\n  //   // if (state.data.pages === undefined) state.data.pages = []\n  //   // else state.data.pages = payload.pages\n  //   state.lastUpdated = new Date().getTime()\n  // },\n\n  // SET_PAGES: (state, payload) => {\n  //   console.log(payload)\n  //   // if (state.data.pages === undefined) state.data.pages = []\n  //   // console.log(payload.pages)\n  //   state.data.pages = payload.pages.map(page => page)\n  //   // console.log(state.data.pages)\n  //   // state.data.user = payload.user\n  //   state.lastUpdated = new Date().getTime()\n  // },\n\n  // SET_TIME: (state, payload) => {\n  //   state.lastUpdated = new Date().getTime()\n  // },\n\n  // SET_LOG_OUT: (state, payload) => {\n  //   console.log('logout')\n  //   state.data.user = null\n  //   state.data.userShow.posts = []\n  // },\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AAaA;AACA;AACA;AADA;AAxBA;AA4BA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAplBA;;;;;;;;;;;ACRA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}