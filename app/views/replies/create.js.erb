btnClick = () => {
  const buttons = document.querySelectorAll('input[type="submit"]');
  buttons.forEach(button => {
    button.addEventListener('click', (event) => {
      // console.log(event.currentTarget);
      const el = event.currentTarget;
      const form = el.closest('form');
      form.addEventListener('submit', (event) => {
        // event.preventDefault();
        if (el.parentElement) {
          console.log('spin');
          console.log(el.parentElement.parentElement);
          const commentID = el.parentElement.dataset.comment;
          console.log(commentID);
          const replyID = el.parentElement.dataset.reply;
          console.log(replyID);
          if (commentID) {
            const newEl = document.createElement('button');
            newEl.setAttribute('class', `btn btn-secondary spinner-comment-${commentID}`);
            newEl.disabled = true;
            newEl.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>`;
            el.replaceWith(newEl);
          }
          if (replyID) {
            const newEl = document.createElement('button');
            newEl.setAttribute('class', `btn btn-secondary spinner-reply-${replyID}`);
            newEl.disabled = true;
            newEl.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>`;
            el.replaceWith(newEl);
          }
        }
      });
    });
  });
}

function refreshForm(innerHTML) {
  const newReplyReplyForm = document.querySelector('#reply-reply-form-<%= @reply.comment.id %>');
  if (newReplyReplyForm) newReplyReplyForm.innerHTML = innerHTML;
  const newReplyForm = document.querySelector('#reply-form-<%= @reply.comment.id %>');
  if (newReplyForm) newReplyForm.innerHTML = innerHTML;
}

function addComment(innerHTML) {
  const replies = document.querySelector('#replies-list-box-<%= @comment.id %>');
  replies.insertAdjacentHTML('beforeend', innerHTML);
}

<% if @reply.errors.any? %>
  refreshForm('<%= j render "replies/form", recipe: @recipe, comment: @comment, reply: @reply %>');
<% else %>
  addComment('<%= j render "replies/show", recipe: @recipe, comment: @comment, reply: @reply %>');
  refreshForm('<%= j render "replies/form", recipe: @recipe, comment: @comment, reply: Reply.new %>');
  button = document.querySelector(`#comment-${<%= @comment.id %>}-replies-list-btn`);
  if(button) {
    button.classList.remove('d-none');
    button.innerHTML = `<span id="replies-list-arrow-<%= @comment.id %>"><i class="material-icons md-16">keyboard_arrow_up</i></span>&ensp;<%= t('.replies', count: @comment.replies.count) %>`;
  } else {
    repliesList = document.getElementById('replies-list-<%= @comment.id %>');
    repliesListBtn = `<div id="comment-<%= @comment.id %>-replies-list-btn" class="text-muted btn btn-sm p-0 reply" data-comment="<%= @comment.id %>">
      <span id="replies-list-arrow-<%= @comment.id %>"><i class="material-icons md-16">keyboard_arrow_up</i></span>&ensp;<%= t('.replies', count: @comment.replies.count) %>
    </div>`;
    repliesList.insertAdjacentHTML('beforebegin', repliesListBtn);
    let viewReplies = false;
    replies = document.querySelectorAll('.replies');
    replies.forEach((reply) => {
      reply.addEventListener('click', event => {
        // console.log(event.currentTarget.dataset.comment);
        const commentId = event.currentTarget.dataset.comment;
        if(parseInt(commentId) === <%= @comment.id %>) {
          const repliesList = document.querySelector(`#replies-list-${commentId}`);
          repliesList.classList.toggle('d-none');
          viewReplies === false ? viewReplies = true : viewReplies = false;
          const arrowState = document.querySelector(`#replies-list-arrow-${event.currentTarget.dataset.comment}`);
          if(viewReplies) arrowState.innerHTML = `<i class="material-icons md-16">keyboard_arrow_down</i>`;
          else arrowState.innerHTML = `<i class="material-icons md-16">keyboard_arrow_up</i>`;
        }
      });
    });
    commentsCount = document.querySelector('#comments-count');
    <% count = 0 %>
    <% count = @recipe.comments.map { |comment| comment.replies.count }.sum %>
    <% count += @recipe.comments.count %>
    commentsCount.innerHTML = `<%= t('.comments', count: count) %>`;
  }
  repliesContent = document.querySelectorAll('.reply-content');
  repliesContent.forEach(replyContent => {
    const editReplyId = document.querySelector(`#edit-reply-${replyContent.dataset.reply}`);
    if (editReplyId) {
      editReplyId.addEventListener('click', (event) => {
        event.preventDefault();
        document.querySelector(`#reply-${replyContent.dataset.reply}-content`).classList.add('d-none');
        document.querySelector(`#edit-reply-${replyContent.dataset.reply}-form`).classList.remove('d-none');
      });
    }
  });
  btnClick();
<% end %>
