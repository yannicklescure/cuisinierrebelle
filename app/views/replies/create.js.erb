selectInput = (replyId) => {
  if (!replyId) replyId = '';
  const input = document.getElementById(`reply-photo-input-${replyId}`);
  console.log(input);
  // we add a listener to know when a new picture is uploaded
  input.addEventListener('change', () => {
    // we call the displayPreview function (who retrieve the image url and display it)
    displayPreview(input, replyId);
  })
}

displayPreview = (input, replyId) => {
  if (input.files && input.files[0]) {
    const reader = new FileReader();
    reader.onload = (event) => {
      document.getElementById(`reply-photo-preview-${replyId}`).src = event.currentTarget.result;
    }
    reader.readAsDataURL(input.files[0])
    const photoActive = document.getElementById(`reply-photo-active-${replyId}`);
    if(photoActive) photoActive.classList.add('d-none');
    document.getElementById(`reply-photo-preview-${replyId}`).classList.remove('d-none');
  }
}

previewReplyPhotoOnFileSelect = () => {
  selectInput();
  const replies = document.querySelectorAll('.reply');
  console.log(replies);
  replies.forEach(reply => {
    // we select the photo input
    const replyId = reply.dataset.reply
    if (replyId) {
      selectInput(reply.dataset.reply);
    }
  });
}

btnClick = () => {
  const buttons = document.querySelectorAll('input[type="submit"]');
  // console.log('btnClick');
  buttons.forEach(button => {
    button.addEventListener('click', (event) => {
      // console.log(event.currentTarget);
      const el = event.currentTarget;
      const form = el.closest('form');
      form.addEventListener('submit', (event) => {
        // event.preventDefault();
        if (el.parentElement) {
          // console.log('spin');
          // console.log(el.parentElement.parentElement);
          const commentID = el.parentElement.dataset.comment;
          // console.log(commentID);
          const replyID = el.parentElement.dataset.reply;
          // console.log(replyID);
          let newEl = document.createElement('button');
          if (commentID) {
            const commentSpinners = document.querySelectorAll(`.spinner-comment-${commentID}`);
            if (commentSpinners) {
              commentSpinners.forEach(commentSpinner => {
                commentSpinner.parentNode.removeChild(commentSpinner);
              });
            }
            newEl.setAttribute('class', `btn btn-light spinner-comment-${commentID}`);
            newEl.disabled = true;
            newEl.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>`;
          } else if (replyID) {
            const replySpinners = document.querySelectorAll(`.spinner-reply-${replyID}`);
            if (replySpinners) {
              replySpinners.forEach(replySpinner => {
                replySpinner.parentNode.removeChild(replySpinner);
              });
            }
            newEl.setAttribute('class', `btn btn-light spinner-reply-${replyID}`);
            newEl.disabled = true;
            newEl.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>`;
          } else {
            newEl.setAttribute('class', `btn btn-light`);
            newEl.disabled = true;
            newEl.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>`;
          }
          // el.replaceWith(newEl);
          el.classList.add('d-none');
          el.insertAdjacentElement('afterEnd', newEl);
        }
      });
    });
  });
}

refreshForm = (innerHTML) => {
  const newReplyReplyForm = document.querySelector('#reply-reply-form-<%= @reply.comment.id %>');
  if (newReplyReplyForm) newReplyReplyForm.innerHTML = innerHTML;
  const newReplyForm = document.querySelector('#reply-form-<%= @reply.comment.id %>');
  if (newReplyForm) newReplyForm.innerHTML = innerHTML;
}

addComment = (innerHTML) => {
  const replies = document.querySelector('#replies-list-box-<%= @comment.id %>');
  replies.insertAdjacentHTML('beforeend', innerHTML);
}

replyPhoto = () => {
  const replyPhotoButtons = document.querySelectorAll('.reply-photo-btn');
  replyPhotoButtons.forEach(replyPhotoButton => {
    // console.log(replyPhotoButton.dataset.reply);
    replyPhotoButton.addEventListener('click', event => {
      let replyId = event.currentTarget.dataset.reply;
      if (!replyId) replyId = '';
      document.querySelector(`#reply-photo-input-${replyId}`).click();
    });
  });
}

editReply = () => {
  const replies = document.querySelectorAll('.reply-content');
  replies.forEach(reply => {
    const editReplyId = document.querySelector(`#edit-reply-${reply.dataset.reply}`);
    if (editReplyId) {
      editReplyId.addEventListener('click', (event) => {
        event.preventDefault();
        document.querySelector(`#reply-${reply.dataset.reply}-content`).classList.add('d-none');
        document.querySelector(`#edit-reply-${reply.dataset.reply}-form`).classList.remove('d-none');
        document.querySelector(`#edit-reply-${reply.dataset.reply}-btn`).classList.remove('d-none');
        const spinners = document.querySelectorAll(`.spinner-reply-${reply.dataset.reply}`);
        if (spinners) {
          console.log(spinners);
          spinners.forEach(spinner => {
            spinner.parentNode.removeChild(spinner);
          });
        }
      });
    }
  });
}

<% if @reply.errors.any? %>
  refreshForm('<%= j render "replies/form", recipe: @recipe, comment: @comment, reply: @reply %>');
<% else %>
  addComment('<%= j render "replies/show", recipe: @recipe, comment: @comment, reply: @reply %>');
  refreshForm('<%= j render "replies/form", recipe: @recipe, comment: @comment, reply: Reply.new %>');
  button = document.querySelector(`#comment-${<%= @comment.id %>}-replies-list-btn`);
  if(button) {
    button.classList.remove('d-none');
    button.innerHTML = `<span id="replies-list-arrow-<%= @comment.id %>"><i class="material-icons md-16">keyboard_arrow_up</i></span>&ensp;<%= t('.replies', count: @comment.replies.count) %>`;
  } else {
    repliesList = document.getElementById('replies-list-<%= @comment.id %>');
    repliesListBtn = `<div id="comment-<%= @comment.id %>-replies-list-btn" class="text-muted btn btn-sm p-0 reply" data-comment="<%= @comment.id %>">
      <span id="replies-list-arrow-<%= @comment.id %>"><i class="material-icons md-16">keyboard_arrow_up</i></span>&ensp;<%= t('.replies', count: @comment.replies.count) %>
    </div>`;
    repliesList.insertAdjacentHTML('beforebegin', repliesListBtn);
    let viewReplies = false;
    // replies = document.querySelectorAll('.replies');
    // replies.forEach((reply) => {
    //   reply.addEventListener('click', event => {
    //     // console.log(event.currentTarget.dataset.comment);
    //     const commentId = event.currentTarget.dataset.comment;
    //     if(parseInt(commentId) === <%= @comment.id %>) {
    //       const repliesList = document.querySelector(`#replies-list-${commentId}`);
    //       repliesList.classList.toggle('d-none');
    //       viewReplies === false ? viewReplies = true : viewReplies = false;
    //       const arrowState = document.querySelector(`#replies-list-arrow-${event.currentTarget.dataset.comment}`);
    //       if(viewReplies) arrowState.innerHTML = `<i class="material-icons md-16">keyboard_arrow_down</i>`;
    //       else arrowState.innerHTML = `<i class="material-icons md-16">keyboard_arrow_up</i>`;
    //     }
    //   });
    // });
    commentsCount = document.querySelector('#comments-count');
    <% count = 0 %>
    <% count = @recipe.comments.map { |comment| comment.replies.count }.sum %>
    <% count += @recipe.comments.count %>
    commentsCount.innerHTML = `<%= t('.comments', count: count) %>`;
  }
  repliesContent = document.querySelectorAll('.reply-content');
  repliesContent.forEach(replyContent => {
    const editReplyId = document.querySelector(`#edit-reply-${replyContent.dataset.reply}`);
    if (editReplyId) {
      editReplyId.addEventListener('click', (event) => {
        event.preventDefault();
        document.querySelector(`#reply-${replyContent.dataset.reply}-content`).classList.add('d-none');
        document.querySelector(`#edit-reply-${replyContent.dataset.reply}-form`).classList.remove('d-none');
      });
    }
  });
  btnClick();
  editReply();
  previewReplyPhotoOnFileSelect();
<% end %>
replyPhoto();
